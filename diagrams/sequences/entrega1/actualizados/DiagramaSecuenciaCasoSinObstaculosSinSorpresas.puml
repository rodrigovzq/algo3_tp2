@startuml
title Diagrama Secuencia Auto Avanza Sin Obstaculos Y Sin Sorpresas
autonumber
actor Jugador

Jugador -> "posicion : Celda"++: getCelda(ESTE )
activate Jugador
"posicion : Celda" --> Jugador: celdaEste
deactivate "posicion : Celda"
 Jugador -> "celdaEste : Celda"++: avanzarEn( auto )

"celdaEste : Celda" -> " : Comun"++: avanzarEn( auto )
" : Comun" -> "auto : Auto"++: avanzarComun()

create "eventoPuntaje : SinPenalizar"
"auto : Auto" -> "eventoPuntaje : SinPenalizar": SinPenalizar()

create "eventoVehiculo : NoCambiarVehiculo"
"auto : Auto"  -> "eventoVehiculo : NoCambiarVehiculo": NoCambiarVehiculo()

create "eventoPosicion : Avanzar"
"auto : Auto"  -> "eventoPosicion : Avanzar": Avanzar()

create "evento : Evento"
"auto : Auto"  -> "evento : Evento": Evento( eventoPuntaje, eventoVehiculo, eventoPosicion)

"auto : Auto" --> " : Comun": evento
deactivate "auto : Auto"

" : Comun" --> "celdaEste : Celda": evento
"celdaEste : Celda" -> " : Comun": siguiente()
" : Comun" --> "celdaEste : Celda": estado
deactivate " : Comun"
"celdaEste : Celda" --> Jugador: evento
deactivate "celdaEste : Celda"

Jugador -> "evento : Evento"++: setDireccion( ESTE )
deactivate "evento : Evento"

deactivate Jugador

Jugador -> "evento : Evento"++: actualizarPuntaje( puntaje )
activate Jugador
Jugador <-- "evento : Evento"--: movimientoTotales
deactivate Jugador

Jugador -> "evento : Evento"++: actualizarVehiculo( auto )
activate Jugador
Jugador <-- "evento : Evento"--: auto
deactivate Jugador

Jugador -> "evento : Evento"++: actualizarPosicion( posicion )
activate Jugador
Jugador <-- "evento : Evento"--: celdaEste
deactivate Jugador


@enduml