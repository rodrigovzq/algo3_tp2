@startuml
' Esto es un primer panorama de todos los clases/interfaces que
'se nos ocurrieron al principio.

' Luego pasamos al diagramas de secuencia, para pensar la interacción
'de cada clase con otras, se nos ocurrieron nuevas ideas, por lo que
'este diagrama de clases puede que no sea 100% congruente con los
'DSecuencia. Principalmente las relaciones, quien tiene a quien.

interface Obstaculo{}
interface Sorpresa{}
interface Vehiculo{}

'Clase/interfaz/Flag que identifique a una celda como el lugar
'a llegar.
class Meta{}

'Clase que representa el estado del jugador.
class Jugador{
    -nombre: string

'Nombre, Puntaje, Vehiculo...
}
class Juego{}

'Clase que encargada de la lógica del juego
'Clase que representa cada manzana del mapa.
class Celda{}

'Clase que encapsula el lugar donde se mueve el jugador/vehículo.
class Escenario{
'Podemos pensar al mapa como
'1. Una matriz dinámica de celdas
'2. un grafo ya que no tiene un tamaño fijo,
'por lo que la celda tendría conocimiento de sus adyacentes
}
'Clase encargada de tener puntajes de partidas anteriores
'ordenadas por cantidad de movimientos.

class PuntajesAltos{}
'Clase encargada de tener la información sobre la ubicación
'del jugador.
class Posicion{}

'Clase que encapsula la logica de movimientos.
class Movimiento{
'Se nos ocurrio para que que el jugador tenga un
'puntaje: Movimiento, para poder delegar la suma, resta,
'descuento o aumento de movimientos.
}

Obstaculo <|.. Pozo
Obstaculo <|.. Piquete
Obstaculo <|.. ControlPolicial

Favorable .up.|> Sorpresa
Desfavorable .up.|> Sorpresa
CambioVehiculo .up.|> Sorpresa

Vehiculo <|.. Moto
Vehiculo <|.. Auto
Vehiculo <|.. CuatroPorCuatro

Jugador <--up* Juego: tiene
Escenario <-right-* Juego: tiene
Juego -left-> PuntajesAltos:usa
Jugador -down-> Posicion
Jugador -down-> Vehiculo

Movimiento <-- Jugador: - puntaje
Movimiento"*"<- PuntajesAltos : - resultados

Celda --> Obstaculo
Celda -> Meta
Celda --> Sorpresa

Vehiculo -> Escenario: usa
Posicion --> Celda
Escenario "1"---->"*" Celda

@enduml