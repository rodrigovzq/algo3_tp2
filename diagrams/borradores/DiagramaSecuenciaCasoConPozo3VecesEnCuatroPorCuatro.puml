@startuml
title Diagrama Secuencia Cuatro por Cuatro Avanza Se Encuentra Con Pozo por Tercera Vez Y Se Penaliza

autonumber

actor Jugador

Jugador -> "posicion : Posicion"++: avanzarHaciaLaDireccion( este, cxc )

activate Jugador
"posicion : Posicion" -> "posicion : Posicion"++: avanzarHaciaElEsteEn( cxc )
"posicion : Posicion" -> "celdaEste : Celda"++: avanzarHaciaElEsteEn( cxc )

"celdaEste : Celda" -> Pozo++: avanzarEn( cxc )
Pozo -> "cxc : CuatroPorCuatro"++: avanzarPozo()
"cxc : CuatroPorCuatro" -> "cxc : CuatroPorCuatro"++: limiteDePozosExcedido()
"cxc : CuatroPorCuatro" --> "cxc : CuatroPorCuatro"--: true
create "dosMovimientos  : Movimiento"
"cxc : CuatroPorCuatro" -> "dosMovimientos  : Movimiento": Movimiento( 2 )
"cxc : CuatroPorCuatro" --> Pozo: dosMovimientos
deactivate "cxc : CuatroPorCuatro"
Pozo --> "celdaEste : Celda": dosMovimientos
deactivate Pozo
"celdaEste : Celda" --> "posicion : Posicion": dosMovimientos
deactivate "celdaEste : Celda"

'Viola el TellDontAsk, pero no es la solucion final.
'Es para chequear que el movimiento es posible, por ejemplo,
'cuando queres pasar por un piquete con un auto. No debemos actualizar
'la posicion, ya que no podemos avanzar.

' Además planteado así, deberíamos hacerlo en cada metodo de avanzar
'porque necesitamos saber que celda es nuestra proxima posicion.
"dosMovimientos  : Movimiento" <- "posicion : Posicion"++: esPosible()
"dosMovimientos  : Movimiento" --> "posicion : Posicion": true
deactivate "dosMovimientos  : Movimiento"

"posicion : Posicion" -> "posicion : Posicion"++: setPosicion( celdaEste )
"posicion : Posicion" --> Jugador--: dosMovimientos
deactivate "posicion : Posicion"
deactivate "posicion : Posicion"
Jugador -> "puntaje: Movimiento"++: sumarMovimientos( dosMovimientos )

deactivate Jugador
@enduml