@startuml
title Diagrama Secuencia Auto Avanza Sin Obstaculos Y Sin Sorpresas Vol. 2
autonumber
actor Jugador

group "X unMovimiento"
activate Jugador

Jugador -> "posicion : Posicion"++: avanzarHaciaLaDireccion( este, auto )

"posicion : Posicion" -> "posicion : Posicion"++: avanzarHaciaElEsteEn( auto )
note left
** ¿A que celda me muevo?**

Si cada celda conoce a sus
adyacentes, con un simple
switch() se soluciona la
decisión para que celda movernos.

Considero que esta ok el switch
porque es dificil que el jugador
varíe radicalmente su forma de
moverse, aunque en caso de pasar
habría que modificar mucho.
end note
"posicion : Posicion" -> "celdaEste : Celda"++: avanzarEn( auto )

"celdaEste : Celda" -> Comun++: avanzarEn( auto )
Comun -> "auto : Auto"++: avanzarComun()
create "unMovimiento : Movimiento"
"auto : Auto" -> "unMovimiento : Movimiento": MovimientoValido( 1 )
"auto : Auto" --> Comun: unMovimiento
deactivate "auto : Auto"
Comun --> "celdaEste : Celda": unMovimiento
deactivate Comun
"celdaEste : Celda" --> "posicion : Posicion": unMovimiento
deactivate "celdaEste : Celda"

note left
**¿ Violación Tell Don't Ask ?**

Pregunta si es válido el
movimiento, ya que a veces no nos
podemos mover por un Piquete.
end note


"unMovimiento : Movimiento" <- "posicion : Posicion"++: esPosible()
"unMovimiento : Movimiento" --> "posicion : Posicion": true
deactivate "unMovimiento : Movimiento"
"posicion : Posicion" -> "posicion : Posicion"++: setPosicion( celdaEste )




"posicion : Posicion" --> Jugador--: unMovimiento
deactivate "posicion : Posicion"
deactivate "posicion : Posicion"

Jugador -> "puntaje : Movimiento": sumarunMovimiento( unMovimiento )
end

@enduml