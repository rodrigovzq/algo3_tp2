@startuml
' Diagrama que representa lo necesario para
'visualizar el diagrama secuencia Version 0.1

'Clase que encargada de la lógica del juego
class Juego

Juego *-right- Jugador

'Clase que encapsula la logica de movimientos.
class Movimiento{
    - cantidad: Integer
    + sumarMovimiento( movimientos )
    + esPosible(): boolean
}

interface Vehiculo{
    + {abstract} avanzarComun(): Movimiento
    + {abstract} avanzarPiquete(): Movimiento
    + {abstract} avanzarControlPolicial(): Movimiento
    + {abstract} avanzarPozo(): Movimiento
}

Moto .up.|> Vehiculo
Auto .up.|> Vehiculo
cuatroPorCuatro .up.|> Vehiculo

class Moto{
    + avanzarComun(): Movimiento
    + avanzarPiquete(): Movimiento
    + avanzarControlPolicial(): Movimiento
    + avanzarPozo(): Movimiento
}
class Auto{
    + avanzarComun(): Movimiento
    + avanzarPiquete(): Movimiento
    + avanzarControlPolicial(): Movimiento
    + avanzarPozo(): Movimiento
}
class cuatroPorCuatro{
    + avanzarComun(): Movimiento
    + avanzarPiquete(): Movimiento
    + avanzarControlPolicial(): Movimiento
    + avanzarPozo(): Movimiento
}




'Clase que representa el estado del jugador.
class Jugador{
    - nombre: String
    + avanzarHaciaLaDireccion( Direccion dirMovimiento, Vehiculo v ): Movimiento
}

Jugador -down-> Vehiculo
Jugador --> Movimiento: - puntaje
Jugador --> Posicion

'Hay que ver como, pero de alguna manera, por medio de la celda que compone a la posicion
'le hablamos a una de las celdas adyacentes para movernos con el vehiculo.
class Posicion{
    + setPosicion( Celda posicion )
    + avanzarHaciaLaDireccion( Direccion dirMovimiento, Vehiculo v ): Movimiento
    - avanzarHaciaElNorteEn( Vehiculo v ): Movimiento
    - avanzarHaciaElOesteEn( Vehiculo v ): Movimiento
    - avanzarHaciaElSurEn( Vehiculo v ): Movimiento
    - avanzarHaciaElEsteEn( Vehiculo v ): Movimiento
}

Posicion --> Celda: - posicionJugador

'Clase que representa cada manzana del mapa.
'Esta se va a comunicar con su estado, que representa
'un "evento" particular.
class Celda{
    + avanzarEn( Vehiculo v ): Movimiento
}

Celda --> EstadoCelda

'Patron State, cada celda tiene un estado/evento que va a utilizar
'la información que le pasemos por parametros de manera distinta.

interface EstadoCelda{
    + {abstract} avanzarEn( Vehiculo v ): Movimiento
}

Obstaculo --|> EstadoCelda
Comun --|> EstadoCelda

class Comun{
    + avanzarEn( Vehiculo v ): Movimiento
}

interface Obstaculo{
    + {abstract} avanzarEn( Vehiculo v ): Movimiento
}

class Piquete{
    + avanzarEn( Vehiculo v ): Movimiento
}
class Pozo{
    + avanzarEn( Vehiculo v ): Movimiento
}
class ControlPolicial{
    + avanzarEn( Vehiculo v ): Movimiento
}

Piquete ..|> Obstaculo
Pozo ..|> Obstaculo
ControlPolicial ..|> Obstaculo


/' Por ahora no nos interesan las sorpresas
interface Sorpresa{
    + {abstract} avanzarEn( Vehiculo v ): Movimiento
}

Sorpresa --|> EstadoCelda
class Favorable{
    + avanzarEn( Vehiculo v ): Movimiento
}
Favorable ..|> Sorpresa
class Desfavorable{
    + avanzarEn( Vehiculo v ): Movimiento
}
Desfavorable ..|> Sorpresa
class CambioVehiculo{
    + avanzarEn( Vehiculo v ): Movimiento
}
CambioVehiculo ..|> Sorpresa
'/
@enduml